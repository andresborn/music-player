{"version":3,"sources":["components/Header.js","components/List.js","components/Button.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","currentSong","List","children","Button","onClick","icon","Main","useState","songs","setSongs","setCurrentSong","isPlaying","setIsPlaying","audioEL","useRef","useEffect","a","fetch","response","json","songsResponse","songArray","forEach","song","i","songObj","songIdx","songName","name","songURL","url","push","requestSongs","current","play","pause","PlayButton","HeaderDisplay","map","data-attribute","Idx","changeSong","ref","src","type","previous","filter","next","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bf44619.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = props => {\n    return (\n        <div className={props.className}>\n            <h2>{props.currentSong}</h2>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\n\nconst List = props => {\n    return (\n        <div className={props.className}>\n            <ul className=\"list\">{props.children}</ul>\n        </div>\n    )\n}\n\nexport default List\n","import React from 'react'\n\nconst Button = props => {\n    return (\n        <button className=\"button bg-grey text-white\" onClick={props.onClick}>\n            {props.icon}\n        </button>\n    )\n}\n\nexport default Button\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport List from \"./List\";\nimport Button from \"./Button\";\n\nconst Main = (props) => {\n  const [songs, setSongs] = useState([]);\n  const [currentSong, setCurrentSong] = useState(\"\");\n  const [isPlaying, setIsPlaying] = useState(true);\n\n  const audioEL = useRef();\n\n  const apiURL = \"https://assets.breatheco.de/apis/sound/\";\n\n  // Get data and store it in state\n  useEffect(() => {\n    const requestSongs = async () => {\n      const response = await fetch(\n        \"https://assets.breatheco.de/apis/sound/songs\"\n      );\n      let songsResponse = await response.json();\n      let songArray = [];\n      songsResponse.forEach((song, i) => {\n        const songIdx = i;\n        const songName = song.name;\n        const songURL = song.url;\n        const songObj = { songIdx, songName, songURL };\n        songArray.push(songObj);\n      });\n      setSongs(songArray);\n    };\n    requestSongs();\n  }, []);\n\n  useEffect(() => {\n    // We are monitoring currentSong, and if it changes, play the audio\n    audioEL.current.play();\n  }, [currentSong]);\n\n  // Functionality\n  const changeSong = (i) => {\n    setCurrentSong(songs[i]);\n  };\n\n  const play = () => {\n    if (!currentSong) { // if you press play button before selecting a song, this will prevent crashing\n        return\n    } else {\n        audioEL.current.play();\n        setIsPlaying(true);}\n    \n  };\n\n  const pause = () => {\n    audioEL.current.pause();\n    setIsPlaying(false);\n  };\n\n  const forward = () => {\n    if (!currentSong) {\n        return\n    } else {\n        const next = songs.filter((song, i) => {\n            if (currentSong.songIdx+1 > songs.length-1) { // If next song index will be bigger than the length of the array\n              return song.songIdx === 0; // go back to the beginning / return our song obj\n            } else {\n              if (song.songIdx === currentSong.songIdx + 1) {\n                return song;\n              }\n            }\n          });\n          setCurrentSong(next[0]);\n    }\n  };\n\n  const previous = () => {\n      if (!currentSong) {\n          return\n      } else {\n        const previous = songs.filter((song, i) => {\n            if (currentSong.songIdx === 0) {\n              return song.songIdx === 21;\n            } else {\n              if (song.songIdx === currentSong.songIdx - 1) {\n                return song;\n              }\n            }\n          });\n          setCurrentSong(previous[0]);\n      }\n  };\n\n  //Dynamic rendering\n  const PlayButton = () => {\n    if (isPlaying) {\n      return (\n        <Button icon={<i className=\"bi-pause-fill icon\"></i>} onClick={pause} />\n      );\n    } else {\n      return (\n        <Button icon={<i className=\"bi-play-fill icon\"></i>} onClick={play} />\n      );\n    }\n  };\n\n  const HeaderDisplay = () => {\n    if (!currentSong.songName) {\n        return <Header\n        className=\"center text-white\"\n        currentSong=\"Pick a song!\"\n      />\n    } else {\n      return <Header\n        className=\"center text-white\"\n        currentSong={currentSong.songName}\n      />;\n    }\n  };\n\n  return (\n    <div className=\"container center column mx my\">\n    <HeaderDisplay />\n      <List className=\"text-white column\">\n        {songs.map((song, i) => (\n          <li\n            className=\"song-item\"\n            key={song.songIdx}\n            data-attribute={song.Idx}\n            onClick={() => changeSong(i)}\n          >\n            <div>{song.songIdx}</div>\n            <span>&nbsp;</span>\n            <div>{song.songName}</div>\n          </li>\n        ))}\n      </List>\n      \n        <audio\n          ref={audioEL}\n          src={apiURL + currentSong.songURL}\n          type=\"audio/mp3\"\n        ></audio>\n      \n      <div className=\"center row mx\">\n        <Button\n          icon={<i className=\"bi-skip-backward-fill icon\"></i>}\n          onClick={previous}\n        />\n        <PlayButton />\n        <Button\n          icon={<i className=\"bi-skip-forward-fill icon\"></i>}\n          onClick={forward}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","import './App.css';\nimport Main from './components/Main';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}